#
# Copyright (c) 2017 Digi International Inc.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
# REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
# AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
# INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
# LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
# OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
# PERFORMANCE OF THIS SOFTWARE.
#
# Digi International Inc. 11001 Bren Road East, Minnetonka, MN 55343
# =======================================================================

# Use GNU C Compiler
CC = gcc

# Location of Private Connector Code.
CCAPI_DIR=../ccapi
CCIMP_DIR=../ccimp
CCFSM_DIR=$(CCAPI_DIR)/source/ccfsm

CCFSM_PRIVATE_DIR=$(CCFSM_DIR)/source
CCAPI_PRIVATE_DIR=$(CCAPI_DIR)/source
# Locate of Public Include Header Files.
CCFSM_PUBLIC_HEADER_DIR=$(CCFSM_DIR)/include
CCAPI_PUBLIC_HEADER_DIR=$(CCAPI_DIR)/include

# Location of Platform Src Code.


# Resolves where to find Source files.
vpath $(CCFSM_PRIVATE_DIR)/%.c
vpath $(CCIMP_DIR)/%.c

# CFLAG Definition
CFLAGS += $(DFLAGS)
# Enable Compiler Warnings
CFLAGS += -Winit-self -Wbad-function-cast -Wpointer-arith
CFLAGS += -Wmissing-parameter-type -Wstrict-prototypes -Wformat-security 
CFLAGS += -Wformat-y2k -Wold-style-definition -Wcast-align -Wformat-nonliteral 
CFLAGS += -Wpadded -Wredundant-decls -Wvariadic-macros
CFLAGS += -Wall -Werror -Wextra -pedantic
CFLAGS += -Wno-error=padded -Wno-error=format-nonliteral -Wno-unused-function -Wno-missing-field-initializers 
# Use ANSIC 99
CFLAGS +=-std=c99 
# Include POSIX and GNU features.
CFLAGS += -D_POSIX_C_SOURCE=200112L -D_GNU_SOURCE 
# Include Public Header Files.
CFLAGS += -I. -I$(CCFSM_PUBLIC_HEADER_DIR) -I$(CCAPI_PUBLIC_HEADER_DIR)
# Include Platform Header Files.
CFLAGS += -I$(CCIMP_DIR)

CFLAGS += -g -O0 -DDEBUG

# Target output to generate.
APP_SRCS = main.c simulated_tank.c device_id_utils.c
CCFSM_PRIVATE_SRCS = $(CCFSM_PRIVATE_DIR)/connector_api.c

CCAPI_PRIVATE_SRCS := $(CCAPI_PRIVATE_DIR)/ccapi.c
CCAPI_PRIVATE_SRCS += $(CCAPI_PRIVATE_DIR)/ccapi_init.c
CCAPI_PRIVATE_SRCS += $(CCAPI_PRIVATE_DIR)/ccapi_logging.c
CCAPI_PRIVATE_SRCS += $(CCAPI_PRIVATE_DIR)/ccapi_transport_tcp.c
CCAPI_PRIVATE_SRCS += $(CCAPI_PRIVATE_DIR)/ccapi_transport_udp.c
CCAPI_PRIVATE_SRCS += $(CCAPI_PRIVATE_DIR)/ccapi_transport_sms.c
CCAPI_PRIVATE_SRCS += $(CCAPI_PRIVATE_DIR)/ccapi_datapoints.c
CCAPI_PRIVATE_SRCS += $(CCAPI_PRIVATE_DIR)/ccapi_send.c
CCAPI_PRIVATE_SRCS += $(CCAPI_PRIVATE_DIR)/ccapi_receive.c
CCAPI_PRIVATE_SRCS += $(CCAPI_PRIVATE_DIR)/ccapi_data_handler.c
CCAPI_PRIVATE_SRCS += $(CCAPI_PRIVATE_DIR)/ccapi_datapoints_binary.c
CCAPI_PRIVATE_SRCS += $(CCAPI_PRIVATE_DIR)/ccapi_filesystem.c
CCAPI_PRIVATE_SRCS += $(CCAPI_PRIVATE_DIR)/ccapi_filesystem_handler.c
CCAPI_PRIVATE_SRCS += $(CCAPI_PRIVATE_DIR)/ccapi_firmware_update_handler.c
CCAPI_PRIVATE_SRCS += $(CCAPI_PRIVATE_DIR)/ccapi_cli_handler.c

CCIMP_SRCS := $(CCIMP_DIR)/ccimp_filesystem.c
CCIMP_SRCS += $(CCIMP_DIR)/ccimp_hal.c  
CCIMP_SRCS += $(CCIMP_DIR)/ccimp_logging.c  
CCIMP_SRCS += $(CCIMP_DIR)/ccimp_network_sms.c  
CCIMP_SRCS += $(CCIMP_DIR)/ccimp_network_tcp.c  
CCIMP_SRCS += $(CCIMP_DIR)/ccimp_network_udp.c  
CCIMP_SRCS += $(CCIMP_DIR)/ccimp_os.c  
CCIMP_SRCS += $(CCIMP_DIR)/dns_helper.c  

SRCS = $(APP_SRCS) $(CCIMP_SRCS) $(CCFSM_PRIVATE_SRCS) $(CCAPI_PRIVATE_SRCS)

# Libraries to Link
LIBS = -lc -lz -lpthread -lrt

# Generated Sample Executable Name.
SAMPLE = ccapi

# since each of the samples shares private and platform files, do a clean each time we make
.PHONY:all
all: clean $(SAMPLE)

# Linking Flags.
LDFLAGS += $(DFLAGS) -Wl,-Map,$(SAMPLE).map,--sort-common

OBJS = $(SRCS:.c=.o)

$(SAMPLE): $(OBJS)
	$(CC) $(LDFLAGS) $^ $(LIBS) -o $@	


.PHONY: clean
clean:
	-rm -f $(SAMPLE) $(OBJS) $(SAMPLE).map
